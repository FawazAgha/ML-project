CS310 Data Structures

Socrates Dimitriadis socrates@gmu.edu

Office hours: Wednesdays 1-3 pm (ENGR 4508) George Mason University
Today

–Last Lecture

– Course Overview –Today
– Java Review
● Memory allocation ● Generics
● Nested classes ● Iterators

–Coming Soon… – In-class activities
– Coding Warm-up (Due 9/5)
Javadoc on class and methods

/**
 *  JavaDoc class comment
 *  @author Uncle Sam
 */
public class Program {
    /**
     *  JavaDoc method comment.
     *  @param args command line arguments
     */
    public static void main(String[] args) {
        System.out.println("Entire Review");
    }
}

Does this program compile?	Does it run?	How does it know what System is?
IDE Compiling Issues

–IDEs are great, but different companies use different ones and you need to know what it is doing

–Default Package

– You need to know how to make code compile from the command line using the default package

– IDEs typically place new class files into a package other than the default package.

–Including other libraries

– It is expected you will be able to use a classpath on the command line (not just in your IDE)
Compiling and Running

–Useful commands javac --version java ––version javac Program.java javac *.java
javac -cp .:junit.jar Program.java java Program arg1 arg2 arg3
java -Xss1G myClass
●     Use -Xss to set the thread stack size ●     Use -Xmx to set the maximum heap size
●	Use -Xms to set the initial Java heap size

Let’s see what commands the Coding Warm-up project requires

Review: Memory Allocation
Memory – Stack – Heap

The Stack is a Last-In-First-Out structure that keeps track of the function calls, their arguments and their local variables

The Heap is a Random Access structure that stores the variables that are dynamically allocated during the execution, e.g. array, objects

Text (code) is generated from the compilation of the source code. It is stored in a separate location and has a fixed size during execution.

What if a method with several local variables is invoked?
Arrays of Primitive Types

memory instruction pointer	int[] p;	p = null

p = new int[3];
Arrays of Primitive Types
p[1] = 0

int[] p;

instruction pointer	p = new int[3];

memory p = <address>
p[0] = 0

p[2] = 0

What if we want to create an array of some kind of objects, e.g. Points?

memory instruction pointer	Point[] p;	p = null

p = new Point[3];

Point[] p;

instruction pointer	p = new Point[3];

memory

p = <address>

p[0] = null p[1] = null p[2] = null

Point[] p;

p = new Point[3];

instruction pointer	p[0] = new Point(1,2);

memory

p = <address>

p[0] = <address> p[1] = null       p[2] = null

Point[] p;

p = new Point[3];

instruction pointer	p[1] = new Point(3,4);

memory

p = <address>

p[0] = <address> p[1] = <address> p[2] = null

Point[] p;

p = new Point[3];

memory

p = <address>

p[0] = <address> p[1] = <address> p[2] = <address>

instruction pointer	p[2] = new Point(5,6);
