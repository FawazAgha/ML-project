CS 310 – Fall 2025
Data Structures
L02-Review
Archange G. Destiné
adestine@gmu.edu

Review
o1. Review – Java Basics (Data Types, OOP, Inheritance, Debugging)
o2. Generics
o3. Command Line Interface
o4. Computational Complexity

Recap from last lecture
Where to find course material?
How to access to Piazza, Canvas, Gradescope?
If you need any help: Piazza, Office Hours, Instructors
Overview of Data Structures: List: Static Array, Dynamic
Array, Stack, Queue… also: Tree, Graph, …

Survey completed

Similar to Spring 2025

01- Review – Java Basics (Data Types,
OOP, Inheritance)

Debugging Demo
We will use the files:
- Operation.java
- Program2.java
Debugging using System.out.println…
Using the IDE (Breakpoint, Step Over, Step Into, Step out)

Blank Slide

Java has 2 basic data types: Primitive types / Reference type
You should know what reference type correspond to each primitive type.
This will be helpful when using generics. Generic type can be replaced by Reference type,
not primitives.

Java uses OOP Paradigm
Object-Oriented Design Goals:
1)
Robustness… In addition to have the correct outputs for anticipated inputs,
we want the program to handle unexpected inputs.
2)
Adaptability (can evolve, is portable, etc.)
3)
Reusability  (using same code in different systems)
The 3rd goal is the motivation behind: Inheritance, Abstract, Interface, and
Generic.

Object and References…
Illustration using whiteboard.
Car c = new Car();
What is c?
What happen in the memory when new Car() is
executed?
What if we do Car d = c; ?

Blank Slide

Keyword: Reusability
via Inheritance / IS-A relationship (see Liskov Substitution Principle)
WhiteBoard

Keyword: Reusability
via Abstract/Interface (focus on What instead of How)
WhiteBoard
/**
An interface for methods that return
the perimeter and area of an object.
*/
public interface Measurable
{
/** Gets the perimeter.
@return
The perimeter. */
public double getPerimeter();
/** Gets the area.
@return
The area. */
public double getArea();
} // end Measurable

Keyword: Reusability
via Abstract/Interface (focus on What instead of How)

OOP review: Interface vs Abstract Class
Purpose of interface similar to that of abstract class
Use an abstract class …
If you want to provide a method definition
Or declare a private data field that your classes will have
in common
Subclasses are similar in nature.
A class can implement several interfaces but can extend
only one abstract class.

Blank Slide

Keyword: Reusability
via Generics
Coding examples:
MyGeneric.java (Hint- Liskov Substitution Principle)
See: UseMyGeneric.java
BestGeneric.java
See: UseBestGeneric.java
- Setting Upper Bound / Update with an Interface (Sellable for instance)

Questions…
Use PollEv.com/adestine for in-class Q&A
or just Raise Hand

02- Generics

Let’s review Generics (learnt from previous course)

Questions…
Use PollEv.com/adestine for in-class Q&A
or just Raise Hand

More on Generics
Consider those 2 problems…

Unfortunately this doesn’t work because compiler can’t tell
if T has a compareTo() method

Bounded Type Parameters – Upper Bound

Bounded Type Parameters – Upper Bound

Sometimes Upper bound is not enough

Bounded Type Parameters – Lower Bound

Combining Lower Bounds and Upper Bounds

Questions?

Questions…
Use PollEv.com/adestine for in-class Q&A
or just Raise Hand

03- Command Line Interface
Whiteboard
Coding Illustration

Questions…
Use PollEv.com/adestine for in-class Q&A
or just Raise Hand

04- Computational Complexity

Algorithm Analysis
Algorithm (steps to solve a problem) VS
Algorithm Analysis (how good is the solution in terms of time,
memory used, …)
Why are we discussing Algorithm in a Data Structures course?
Hint: DS → Objects and Operations

Two complexities
Time-complexity
How much time
Space-complexity
How much memory
More about these concepts (next lecture)

Next Lecture (Lecture 03)
1.
Efficient programming / Computational
Analysis (more on this topic)
2.
Iterators, Inner Classes
3.
Dynamic Arrays
Reminders:
Keep Working on Project_0
Do the readings (Ch. 6.1-6.3 and Ch. 15)
