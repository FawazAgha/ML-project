CS310
Data Structures
K. Raven Russell
krusselc@gmu.edu
George Mason University

Today
– Last Lecture(s)
– Tree Traversals
– Today
– More advanced data structures!
– Heaps

New Schedule

“Lightning” Warm-up

Trees at Work #1: Heaps
(NOT related to memory heaps, sorry!)
Priority Queues and Sorting

Priority Queue Intro
– n = number of items put in the queue
Operation
Implementation
add
remove
peek
Unordered List
Sorted Array List

Heaps
– A type of tree!
– Usually binary when learning... K-ary professionally
– Relationship maintained between... parent and child
– Operations:
– Deleting items removes the root (“top” item)
– Adding items adds to the “end” / “bottom”
– Items “swim” up and “sink” down to maintain order
– Maintains two properties
– structure property
– heap order property

Heap Structure
– Want the logical tree represented by the heap to be balanced
– a “nearly complete binary tree”
Note: some books have 1 as the root, we're using 0, but this image is from a book that uses 1

Heap Order Property
Weiss 21.1.2
– Max Heap
– node is always larger than (or equal to) any of its descendants
– Min Heap
– node is always smaller than (or equal to) any of its descendants
– Idea: we want to find max (or min) quickly
– keep at the root of the tree
– every subtree should have the largest (or smallest) item at the
subtree root

Heap Order Property
– Are either of these a heap?

Heap Demo
(Whiteboard GnarlyTrees)
add & remove

(Max) Heap Implementation
– Insert
– adding item at end of the logical tree
– increment the size
– likely violates the heap order property
– fix by swimming the value up the tree
– Delete (the max value)
– remove item at start of the logical tree
– decrement size
– violates the heap structure property
– fix by swapping the last value and the root value
–
likely violates the heap order property
–
sink the new root value down the tree
– null out the last value (prevent loitering)

How Tall Are Trees?
Level 0
Level 1
Level 2
Level 3
Height = 3

How Tall Are Heaps?
Fits 1 item
Fits 2 items
Fits 4 items
Fits 8 items

How Tall Are Heaps?
Fits 1 item (20)
Fits 2 items (21)
Fits 4 items (22)
Fits 8 items (23)
Each level fits 2h items
෍
𝑘𝑘=0
ℎ
2𝑘𝑘= 2ℎ+1 −1
So if I need to fit 𝑛𝑛nodes in the
tree, I’ll need this to be true:
2ℎ+1 −1 ≥𝑛𝑛
And ℎmust be 𝑂𝑂(lg 𝑛𝑛)
Remember, lg(𝑛𝑛) is just used to question: 2? = 𝑛𝑛or
“how many times do I need to multiply by 2 to get 𝑛𝑛?”

Priority Queue Summary
– n = number of items put in the queue
– m = number of priorities
Operation
Implementation
add
remove
peek
Unordered List
Ordered List
Binary Heap

Priority Queue Summary
– n = number of items put in the queue
– m = number of priorities
Operation
Implementation
add
remove
peek
Unordered List
Ordered List
Binary Heap
O(lg n)
O(lg n)

Add the following numbers onto a max heap and show the steps when you
delete the max 5 times. Draw the ARRAY at each step.
3, 5, 2, 3, 9

(no fix)

What do you
notice about
these two
arrays?

(no fix)

(and fix more)

(and fix more)

(and fix more)

(and fix more)

9?

5?

What do you
notice about
these two
arrays?

(and fix-part 1!)

(and fix-part 1!)

(and fix-part 1!)

(fix-part 2)

(fix-part 2)

(and fix!)

(and fix!)

(and fix!)

Heap Sort Version 1 Summary
O(n lg n) Build Heap
Sort

Uses for a Heap?
– Two things we've already seen!
– Priority Queue
– maintain order by “priority”
– highest priority at the top
– removing an item puts the next highest priority at the top
– Sorting
– Max heap for ascending order
– Min heap for descending order

Using Heaps for Sorting
– Given a binary heap and n items to sort
– Option 1:
– insert each item into the heap
– remove until no more elements
– place elements at the “back” of the array used to store the heap
– Option 2: Next class!

Gnarley Trees
