Overview of Data Structures

What is a Data Structure?
* A way of storing and managing data so that it can be
used efficiently

* Typically implemented as an ADT (Abstract Data Type)

* What basic operations should exist for a data structure to
be useful?
* Insertion
* Deletion
* Searching
* Updating

Why use one data structure over another?
It depends on your application
* some are faster for insertions
* some are faster for deletions
* some are faster for searching
* some favor space or speed?
* some are fit for prototyping (easy to use but slow)

Some lend themselves to the problem at hand:
* To manage submitted jobs to a print manager, you would use a  ?
* To track visited web pages in a browser, you would use a  ?

FIFO vs. LIFO

How do Data Structures relate to Algorithms?
* An Algorithm is a step-by-step procedure to be followed to reach some desired output
* A Data Structure is where data is stored...
* ...so that some algorithm could process/use the data efficiently (and reach some goal)
(Data Structures need Algorithms...)
* An Algorithm can use one or more data structures to solve a problem, .e.g., one cannot do Depth First Search without a Stack
(Algorithms need Data Structures...)
* So data structures need to be associated with algorithms, and vice versa.
Algorithms are like verbs and Data Structures are
like nouns

(From now on, "Data Structures" means "Data Structures and associated operations
and algorithms")

Goals of this Course

1. Reinforce the concept that every data structure involves some costs and some benefits

2. Learn the commonly used data structures
 Acquire a data structures toolset

3. Understand how to measure the cost of a data structure or
algorithm

Why learn about Data Structures and Algorithms?

The choice of a data structure and algorithm can make the difference between achieving a task

in seconds
vs. in days
vs. in years
vs. a lifetime!

...it is all about Efficiency
(w.r.t speed and space)

however...Efficiency is a relative term
* A solution is efficient if it solves the problem within the given resource constraints
* Space (storage: memory, disk)
* Time
* Most times these resources compete

* The cost of a solution is the amount of resources that the solution
consumes

* If the requirements are met, no need to seek a more efficient solution,
* The benefits of the faster solution might not be observable/measurable
* e.g., GUI app requires response < 800 ms
* Alg1(6ms) vs. Alg2(700ms) ?

Another perspective for choosing Data Structures and Algorithms (beyond Time and Space)

1. One that is easy to understand, code, debug, maintain
==> Software Engineering view

2. One that makes efficient use of the computer's resources (but is possibly more complex)
==> Computer Science view

8

How to Measure Efficiency?
1. Empirically: run/compare used resources*
2. Formally: Runtime/Complexity Analysis

Related Concepts:

* *Critical resources: Time, Space, Programmers effort, Usability (ease of use), energy consumed (impact on environment... data centers)

* Running time usually depends on "size" n of the input, it is expressed as T(n) for some function T

* Other factors affecting running time: Machine load, OS,
Compiler, Specific input values	9
