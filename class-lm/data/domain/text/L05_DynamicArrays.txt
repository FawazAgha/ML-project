CS 310 – Fall 2025
Data Structures
L05- More on ArrayList
Archange G. Destiné
adestine@gmu.edu

Outline Lecture 05
Recap from last Lecture (Dynamic Array)
Static Array List Implementation
Iterators
Notes:
•
Project 1
•
Always do the readings

Not quite the Average time complexity. (probabilistic approach)
What is Average Time Complexity? Let’s see a common example…
search(e) from an array of size n.
- Best case: ?
- Worst case: ?
- Average case: ? = n/2
= 1/n + 2/n + 3/n + … + n/n = (1/n) (1+2+3+…+n)
= (1/n) * (n(n+1)/2)
   = (n+1)/2
~ n/2

Not quite the Average time complexity. (probabilistic)
It is the total cost per operation over a sequence of operations.
What does Amortized O(1) means? We can use the accounting
approach to understand the time complexity of add/end for the
dynamic array.

We can use the accounting approach to understand the time
complexity of add/end for the dynamic array.
…
…

We can use the accounting approach to understand the time
complexity of add/end for the dynamic array.
…
…
Amortization scheme: “Each operation is charged three cyberdollars and all the computing time is paid for.”
Let imagine this scenario:
-> 1$ for each push (excluding the copying operation)
-> And let’s overcharge this push by 2 dollars. (saved for expensive operation)
-> at index 2i when it is time to double the capacity, we have saved enough
-> 1 push cost 3 units in the long run… → O(1) Amortized complexity

We can use the accounting approach to understand the time
complexity of add/end for the dynamic array.

Questions…

Exception (review from CS211)

You must handle them (whenever you can)

Exception Propagation
What happens in the call stack?

How to create Exception?

How to create your Own Exception?
public class MyException extends Exception {
  public MyException(String errorMessage) {
    super(errorMessage);
3 types of Exceptions in Java:
Checked exception: A good program should allow the user to recover from this.
→Subject to the Catch or Specify Requirement.
Error: due to exceptional conditions external to the application, you do not expect the program to recover
from this.
→Not subject to the Catch or Specify Requirement.
Runtime exception: Exceptional conditions internal to the application, hard to anticipate or recover from.
→ Not subject to the Catch or Specify Requirement.

Checked vs Unchecked Exceptions

Iterators, relation with ADT
Very common operation on any collection of items (array
list, list, or sequence) is to march through its elements in
order, one at a time.
We can define the iterator ADT as supporting the
following two methods:
- hasNext(): tell if there is a next element;
- next(): returns the next element in the iterator.

Iterators… relation with ADT
Java provides an interface: java.util.Iterator
ADTs storing collections of objects should be able to provide an iterator
object. One way to enforce this is to have your ADT implementing Iterable

Iterators… the concept
– The bookmark for data structures!

– Give access to all the items in a collection in some unspecified order
- Conceptually the iterator has a position between two elements
Operations
– Most important: next() and hasNext()
– Optional: previous(), hasPrevious(), add(), remove()
See it as a finger on the structure

Iterator Basics
Instead of…
int curr= 0
while(curr < size) {

value =arr[curr++];
We can have this:
//curr is a new iterator //initialization
while(curr.hasNext()) { //stop condition

value = curr.next(); //get value AND increment
=> The iterator needs to do this:
- data initialization?
- when should we stop?
- how do we get the next object and move over?

Iterator Basics: Dynamic Array
Instead of…
int curr= 0
while(curr < size) {

value =arr[curr++];
We can have this:
//curr is a new iterator //initialization
while(curr.hasNext()) { //stop condition

value = curr.next(); //get value AND increment
=> The iterator needs to do this:
- data initialization

→ curr = 0;
- when should we stop

→ curr < size
- how do we get the next object and move over

→ arr[curr++]

Questions?

Java Iterators
Interface Iterable<T>
–java.lang
–Iterator<T> iterator()
–http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html
Interface Iterator<E>
–java.util
–booleanhasNext()
–E next()
–http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html

Iterators
The iterator needs to have access to the stored data…
1) Provide and use a reference to the underlying structure…
2) Or, create and work on a copy of the underlying data storage
Pros and Cons…
Iterator implemented as a different class vs nested class?

Nester Review: Advanced Java (from CS211)
Nested classes:
Static class
Inner class (non static nested class)
Local class
Anonymous class

Review: Advanced Java
Static class
class Outer {

static class StaticNested{

/*Code Here*/

void aMethod() {

StaticNested obj= new StaticNested();

//outside the Outer class...
Outer.StaticNested obj = new Outer.StaticNested();

Review: Advanced Java
Inner class
class Outer {

class Inner {

/*Code Here*/

void aMethod() {

Inner obj= new Inner();

//outside the Outer class using an instance of Outer...
Outer.Inner inObj= outObj.new Inner();

Review: Advanced Java
Local class
class Outer {

void aMethod() {

class Local {

/*Code Here*/

Local loc= new Local();

/*Can't access Local outside aMethod!*/

Review: Advanced Java
Anonymous class
interface Exporter {

public String export();
class MyClass{

public Exporter getExporter() {

return new Exporter() {
public String export() {
return "Export";
}; //<-very important

Iterators implementation
class MyIterator implements Iterator {

private MyList data;

private int current = 0;

public MyIterator(MyList a) {

public boolean hasNext() {

...

return ...

public Object next() {

if (hasNext())

return data.get(current++);

else throw new NoSuchElementException();

public void remove() {

throw new UnsupportedOperationException();

Iterators implementation (use in our List)
class MyList implements Iterable {

public Object[] data;

public MyList (Object[] a) {

public Iterator iterator () {

return new MyIterator(this);

Iterators implementation
(Simpler as Inner Class)
class MyList implements Iterable {

private Object[] data;

public MyList(Object[] a) {

public Iterator iterator () {

return new MyIterator();

private class MyIterator implements Iterator {

private int index = 0;

public boolean hasNext () {

return (index < data.length);

public Object next () {

if (hasNext()) return data[index++];

else throw new NoSuchElementException();

public void remove () {

throw new UnsupportedOperationException();}

Iterators implementation
(It can be more compact with Anonymous Class)
class MyList implements Iterable {

private Object[] data;

public MyList(Object[] a) {

public Iterator iterator () {

return new MyIterator();

private class MyIterator implements Iterator {

private int index = 0;

public boolean hasNext () {

return (index < data.length);

public Object next () {

if (hasNext()) return data[index++];

else throw new NoSuchElementException();

public void remove () {

throw new UnsupportedOperationException();}

Iterators implementation
(It can be more compact with Anonymous Class)
class MyList implements Iterable {

private Object[] data;

public MyList(Object[] a) {

public Iterator iterator () {

return new Iterator {
private int index = 0;
public boolean hasNext () {
return (index < data.length);
public Object next () {
if (hasNext()) return data[index++];
else throw new NoSuchElementException();
public void remove () {
throw new UnsupportedOperationException();}
};

Iterators with Generics
What type of inner class are we using here?

2 Ways to use Iterator

What about other data structure? Same…

Why do we need Iterator/Iterable?
Each data structure is fundamentally different.
Without Iterable/Iterator, clients would have to develop
code tailored to each data structure in order to accomplish
this.
Using common interface, same code to traverse any data
structure:
Lists (Dynamic Arrays, Linked Lists, ...)
Stacks and Queues
Trees and Graphs

More on this later!!!

Questions?

Next Lecture (Lecture 06)
Linked List
Stacks and Queues
Reminders:
Do the readings (Textbook)
Work on P1
